generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(cuid())
  email                 String           @unique
  name                  String
  password              String
  role                  UserRole         @default(OPERATOR)
  lastLogin             DateTime?
  organizationId        String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  avatar                String?
  phone                 String?
  status                UserStatus       @default(ACTIVE)
  campaigns             Campaign[]
  assignedConversations Conversation[]   @relation("AssignedOperator")
  createdConversations  Conversation[]   @relation("CreatedBy")
  messages              Message[]
  reports               Report[]
  userDepartments       UserDepartment[]
  organization          Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  kanbanCardActivities  KanbanCardActivity[]
  kanbanCards           KanbanCard[]
  kanbans               Kanban[]
  kanbanActions         KanbanAction[]

  @@map("users")
}

model Organization {
  id            String         @id @default(cuid())
  name          String
  description   String?
  domain        String?        @unique
  isActive      Boolean        @default(true)
  settings      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  campaigns     Campaign[]
  contacts      Contact[]
  conversations Conversation[]
  departments   Department[]
  instances     Instance[]
  messages      Message[]
  reports       Report[]
  users         User[]
  webhooks      Webhook[]
  kanbans       Kanban[]

  @@map("organizations")
}

model Department {
  id              String           @id @default(cuid())
  name            String
  description     String?
  color           String           @default("#3B82F6")
  organizationId  String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userDepartments UserDepartment[]

  @@unique([name, organizationId])
  @@map("departments")
}

model UserDepartment {
  id           String     @id @default(cuid())
  userId       String
  departmentId String
  createdAt    DateTime   @default(now())
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@map("user_departments")
}

model Instance {
  id             String         @id @default(cuid())
  name           String
  instanceName   String         @unique
  description    String?
  status         InstanceStatus @default(DISCONNECTED)
  qrCode         String?
  webhookUrl     String?
  webhookEvents  String[]
  settings       Json?
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  conversations  Conversation[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@map("instances")
}

model Contact {
  id              String         @id @default(cuid())
  phoneNumber     String
  name            String?
  email           String?
  company         String?
  tags            String[]
  notes           String?
  isActive        Boolean        @default(true)
  lastInteraction DateTime?
  organizationId  String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  externalId      String?
  instanceId      String?
  metadata        Json?
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  conversations   Conversation[]
  messages        Message[]
  kanbanCards     KanbanCard[]

  @@unique([phoneNumber, organizationId])
  @@map("contacts")
}

model Conversation {
  id             String             @id @default(cuid())
  title          String?
  status         ConversationStatus @default(OPEN)
  priority       Priority           @default(MEDIUM)
  tags           String[]
  notes          String?
  organizationId String
  contactId      String
  instanceId     String
  assignedToId   String?
  createdById    String
  lastMessageAt  DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  externalId     String?
  metadata       Json?
  assignedTo     User?              @relation("AssignedOperator", fields: [assignedToId], references: [id])
  contact        Contact            @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdBy      User               @relation("CreatedBy", fields: [createdById], references: [id])
  instance       Instance           @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages       Message[]
  kanbanCards    KanbanCard[]

  @@map("conversations")
}

model Message {
  id             String           @id @default(cuid())
  content        String
  type           MessageType      @default(TEXT)
  direction      MessageDirection @default(INBOUND)
  status         MessageStatus    @default(SENT)
  mediaUrl       String?
  mediaType      String?
  metadata       Json?
  organizationId String
  conversationId String
  contactId      String
  instanceId     String
  sentById       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contact        Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  conversation   Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  instance       Instance         @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sentBy         User?            @relation(fields: [sentById], references: [id])

  @@map("messages")
}

model Campaign {
  id              String         @id @default(cuid())
  name            String
  description     String?
  status          CampaignStatus @default(DRAFT)
  messageTemplate String
  targetContacts  String[]
  scheduledAt     DateTime?
  sentAt          DateTime?
  sentCount       Int            @default(0)
  deliveredCount  Int            @default(0)
  readCount       Int            @default(0)
  organizationId  String
  createdById     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       User           @relation(fields: [createdById], references: [id])
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  kanbanCards     KanbanCard[]

  @@map("campaigns")
}

model Report {
  id             String       @id @default(cuid())
  name           String
  type           ReportType
  filters        Json?
  data           Json?
  organizationId String
  createdById    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      User         @relation(fields: [createdById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Webhook {
  id             String   @id @default(cuid())
  url            String
  events         String[]
  isActive       Boolean  @default(true)
  instanceName   String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model Kanban {
  id             String   @id @default(cuid())
  name           String
  description    String?
  color          String   @default("#3B82F6")
  isActive       Boolean  @default(true)
  organizationId String
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  columns        KanbanColumn[]
  cards          KanbanCard[]
  actions        KanbanAction[]

  @@map("kanbans")
}

model KanbanColumn {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6B7280")
  order     Int
  kanbanId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kanban    Kanban   @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  cards     KanbanCard[]
  actions   KanbanAction[]

  @@map("kanban_columns")
}

model KanbanCard {
  id           String        @id @default(cuid())
  title        String
  description  String?
  order        Int
  columnId     String
  kanbanId     String
  contactId    String?
  conversationId String?
  campaignId   String?
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  column       KanbanColumn  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  kanban       Kanban        @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  contact      Contact?      @relation(fields: [contactId], references: [id], onDelete: SetNull)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)
  campaign     Campaign?     @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  createdBy    User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  activities   KanbanCardActivity[]
  actionExecutions KanbanActionExecution[]

  @@map("kanban_cards")
}

model KanbanCardActivity {
  id        String      @id @default(cuid())
  action    String      // "created", "moved", "updated", "deleted"
  details   Json?
  cardId    String
  userId    String
  createdAt DateTime    @default(now())
  card      KanbanCard  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kanban_card_activities")
}

model KanbanAction {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        ActionType
  trigger     ActionTrigger
  conditions  Json?         // Condições para disparar a ação
  config      Json          // Configuração da ação (mensagem, destinatários, etc.)
  isActive    Boolean       @default(true)
  columnId    String
  kanbanId    String
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  column      KanbanColumn  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  kanban      Kanban        @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  createdBy   User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  executions  KanbanActionExecution[]

  @@map("kanban_actions")
}

model KanbanActionExecution {
  id        String       @id @default(cuid())
  actionId  String
  cardId    String
  status    ExecutionStatus
  result    Json?        // Resultado da execução
  error     String?      // Erro se houver
  executedAt DateTime    @default(now())
  action    KanbanAction @relation(fields: [actionId], references: [id], onDelete: Cascade)
  card      KanbanCard   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("kanban_action_executions")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  OPERATOR
  VIEWER
  MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum InstanceStatus {
  CONNECTED
  DISCONNECTED
  CONNECTING
  ERROR
  QRCODE
}

enum ConversationStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  WAITING
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  LOCATION
  CONTACT
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  PENDING
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  COMPLETED
  CANCELLED
}

enum ReportType {
  PERFORMANCE
  MESSAGES
  CONVERSATIONS
  CONTACTS
  CUSTOM
}

enum ActionType {
  SEND_MESSAGE      // Enviar mensagem via Evolution API
  NOTIFY_USER       // Notificar usuário interno
  CREATE_TASK       // Criar tarefa
  UPDATE_STATUS     // Atualizar status
  SEND_EMAIL        // Enviar email
  WEBHOOK_CALL      // Chamar webhook externo
}

enum ActionTrigger {
  ON_ENTER_COLUMN   // Quando card entra na coluna
  ON_LEAVE_COLUMN   // Quando card sai da coluna
  ON_CARD_CREATE    // Quando card é criado
  ON_TIME_DELAY     // Após X tempo na coluna
  ON_CONDITION      // Quando condição é atendida
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}
